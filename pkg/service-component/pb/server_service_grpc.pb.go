// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: server_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RTService_Login_FullMethodName                   = "/service_component.RTService/Login"
	RTService_Register_FullMethodName                = "/service_component.RTService/Register"
	RTService_CheckToken_FullMethodName              = "/service_component.RTService/CheckToken"
	RTService_GetFilm_FullMethodName                 = "/service_component.RTService/GetFilm"
	RTService_GetFilms_FullMethodName                = "/service_component.RTService/GetFilms"
	RTService_RateFilm_FullMethodName                = "/service_component.RTService/RateFilm"
	RTService_GetRatingsForModeration_FullMethodName = "/service_component.RTService/GetRatingsForModeration"
	RTService_UnlockReview_FullMethodName            = "/service_component.RTService/UnlockReview"
)

// RTServiceClient is the client API for RTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RTServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*Film, error)
	GetFilms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFilmsResponse, error)
	RateFilm(ctx context.Context, in *RateFilmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRatingsForModeration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatingsForModerationResponse, error)
	UnlockReview(ctx context.Context, in *UnlockReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRTServiceClient(cc grpc.ClientConnInterface) RTServiceClient {
	return &rTServiceClient{cc}
}

func (c *rTServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, RTService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RTService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) CheckToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RTService_CheckToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*Film, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Film)
	err := c.cc.Invoke(ctx, RTService_GetFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) GetFilms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFilmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilmsResponse)
	err := c.cc.Invoke(ctx, RTService_GetFilms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) RateFilm(ctx context.Context, in *RateFilmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RTService_RateFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) GetRatingsForModeration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatingsForModerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRatingsForModerationResponse)
	err := c.cc.Invoke(ctx, RTService_GetRatingsForModeration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTServiceClient) UnlockReview(ctx context.Context, in *UnlockReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RTService_UnlockReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RTServiceServer is the server API for RTService service.
// All implementations must embed UnimplementedRTServiceServer
// for forward compatibility.
type RTServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*emptypb.Empty, error)
	CheckToken(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetFilm(context.Context, *GetFilmRequest) (*Film, error)
	GetFilms(context.Context, *emptypb.Empty) (*GetFilmsResponse, error)
	RateFilm(context.Context, *RateFilmRequest) (*emptypb.Empty, error)
	GetRatingsForModeration(context.Context, *emptypb.Empty) (*GetRatingsForModerationResponse, error)
	UnlockReview(context.Context, *UnlockReviewRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRTServiceServer()
}

// UnimplementedRTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRTServiceServer struct{}

func (UnimplementedRTServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRTServiceServer) Register(context.Context, *RegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRTServiceServer) CheckToken(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedRTServiceServer) GetFilm(context.Context, *GetFilmRequest) (*Film, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedRTServiceServer) GetFilms(context.Context, *emptypb.Empty) (*GetFilmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilms not implemented")
}
func (UnimplementedRTServiceServer) RateFilm(context.Context, *RateFilmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateFilm not implemented")
}
func (UnimplementedRTServiceServer) GetRatingsForModeration(context.Context, *emptypb.Empty) (*GetRatingsForModerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingsForModeration not implemented")
}
func (UnimplementedRTServiceServer) UnlockReview(context.Context, *UnlockReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockReview not implemented")
}
func (UnimplementedRTServiceServer) mustEmbedUnimplementedRTServiceServer() {}
func (UnimplementedRTServiceServer) testEmbeddedByValue()                   {}

// UnsafeRTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RTServiceServer will
// result in compilation errors.
type UnsafeRTServiceServer interface {
	mustEmbedUnimplementedRTServiceServer()
}

func RegisterRTServiceServer(s grpc.ServiceRegistrar, srv RTServiceServer) {
	// If the following call pancis, it indicates UnimplementedRTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RTService_ServiceDesc, srv)
}

func _RTService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).CheckToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_GetFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).GetFilm(ctx, req.(*GetFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_GetFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).GetFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_GetFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).GetFilms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_RateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).RateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_RateFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).RateFilm(ctx, req.(*RateFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_GetRatingsForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).GetRatingsForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_GetRatingsForModeration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).GetRatingsForModeration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTService_UnlockReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTServiceServer).UnlockReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RTService_UnlockReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTServiceServer).UnlockReview(ctx, req.(*UnlockReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RTService_ServiceDesc is the grpc.ServiceDesc for RTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_component.RTService",
	HandlerType: (*RTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RTService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _RTService_Register_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _RTService_CheckToken_Handler,
		},
		{
			MethodName: "GetFilm",
			Handler:    _RTService_GetFilm_Handler,
		},
		{
			MethodName: "GetFilms",
			Handler:    _RTService_GetFilms_Handler,
		},
		{
			MethodName: "RateFilm",
			Handler:    _RTService_RateFilm_Handler,
		},
		{
			MethodName: "GetRatingsForModeration",
			Handler:    _RTService_GetRatingsForModeration_Handler,
		},
		{
			MethodName: "UnlockReview",
			Handler:    _RTService_UnlockReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_service.proto",
}
